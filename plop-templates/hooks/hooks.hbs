import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';

import { {{ plural-pascalCase name }}Service } from '../services';
import type  { {{ singular-pascalCase name }}FormData} from '../types'

const QUERY_KEY = ['{{ name }}'];

export function use{{ plural-pascalCase name }}() {
    const useInvalidation = () => {
        const queryClient = useQueryClient();
        return () => {
            queryClient.invalidateQueries({ queryKey: QUERY_KEY }).then(() => console.log('refresh query client'));
        };
    };

    const usersQuery = useQuery({
        queryKey: QUERY_KEY,
        queryFn: () => {{ plural-pascalCase name }}Service.getAll(),
    });

    const createMutation = useMutation({
        mutationFn: (data: {{ singular-pascalCase name }}FormData) => {{ plural-pascalCase name }}Service.create(data),
        onSuccess: useInvalidation(),
    });

    const updateMutation = useMutation({
        mutationFn: ({ id, data }: { id: number; data: {{ singular-pascalCase name }}FormData }) => {{ plural-pascalCase name }}Service.update(id, data),
        onSuccess: useInvalidation(),
    });

    const deleteMutation = useMutation({
        mutationFn: (id: number) => {{ plural-pascalCase name }}Service.delete(id),
        onSuccess: useInvalidation(),
    });

    return {
        {{ plural-camelCase name }}: usersQuery.data ?? [],
        isLoading: usersQuery.isLoading,
        error: usersQuery.error,
        create: createMutation.mutate,
        update: updateMutation.mutate,
        delete: deleteMutation.mutate,
    };


}